{
    "id": "https://mastra.ai/examples/agents/hierarchical-multi-agent",
    "title": "Example: Hierarchical Multi-Agent System | Agents | Mastra",
    "url": "https://mastra.ai/examples/agents/hierarchical-multi-agent",
    "publishedDate": "2024-10-22T00:00:00.000Z",
    "author": "",
    "text": "\n This example demonstrates how to create a hierarchical multi-agent system where agents interact through tool functions, with one agent coordinating the work of others. \n The system consists of three agents: \n \n A Publisher agent (supervisor) that orchestrates the process \n A Copywriter agent that writes the initial content \n An Editor agent that refines the content \n \n First, define the Copywriter agent and its tool: \n import { openai } from \" @ai-sdk/openai \"; \n import { anthropic } from \" @ai-sdk/anthropic \"; \n \n const copywriterAgent = new Agent ({ \n name: \" Copywriter \", \n instructions: \" You are a copywriter agent that writes blog post copy. \", \n model: anthropic ( \" claude-3-5-sonnet-20241022 \"), \n}); \n \n const copywriterTool = createTool ({ \n id: \" copywriter-agent \", \n description: \" Calls the copywriter agent to write blog post copy. \", \n inputSchema: z. object ({ \n topic: z. string (). describe ( \" Blog post topic \"), \n }), \n outputSchema: z. object ({ \n copy: z. string (). describe ( \" Blog post copy \"), \n }), \n execute: async ({ context }) =&gt; { \n const result = await copywriterAgent. generate ( \n ` Create a blog post about ${ context.topic}`, \n ); \n return { copy: result.text }; \n }, \n}); \n Next, define the Editor agent and its tool: \n const editorAgent = new Agent ({ \n name: \" Editor \", \n instructions: \" You are an editor agent that edits blog post copy. \", \n model: openai ( \" gpt-4o-mini \"), \n}); \n \n const editorTool = createTool ({ \n id: \" editor-agent \", \n description: \" Calls the editor agent to edit blog post copy. \", \n inputSchema: z. object ({ \n copy: z. string (). describe ( \" Blog post copy \"), \n }), \n outputSchema: z. object ({ \n copy: z. string (). describe ( \" Edited blog post copy \"), \n }), \n execute: async ({ context }) =&gt; { \n const result = await editorAgent. generate ( \n ` Edit the following blog post only returning the edited copy: ${ context.copy}`, \n ); \n return { copy: result.text }; \n }, \n}); \n Finally, create the Publisher agent that coordinates the others: \n const publisherAgent = new Agent ({ \n name: \" publisherAgent \", \n instructions: \n \" You are a publisher agent that first calls the copywriter agent to write blog post copy about a specific topic and then calls the editor agent to edit the copy. Just return the final edited copy. \", \n model: anthropic ( \" claude-3-5-sonnet-20241022 \"), \n tools: { copywriterTool, editorTool }, \n}); \n \n const mastra = new Mastra ({ \n agents: { publisherAgent }, \n}); \n To use the entire system: \n async function main () { \n const agent = mastra. getAgent ( \" publisherAgent \"); \n const result = await agent. generate ( \n \" Write a blog post about React JavaScript frameworks. Only return the final edited copy. \", \n ); \n console. log (result.text); \n} \n \n main (); \n \n Using a Tool Multi-Agent Workflow",
    "image": "https://mastra.ai/api/og/docs?title=Example:%20Hierarchical%20Multi-Agent%20System%20|%20Agents%20|%20Mastra&description=Example%20of%20creating%20a%20hierarchical%20multi-agent%20system%20using%20Mastra,%20where%20agents%20interact%20through%20tool%20functions.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/examples/agents/hierarchical-multi-agent",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}