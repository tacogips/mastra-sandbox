{
    "id": "https://mastra.ai/examples/workflows/workflow-variables",
    "title": "Data Mapping with Workflow Variables | Mastra Examples",
    "url": "https://mastra.ai/examples/workflows/workflow-variables",
    "publishedDate": "",
    "author": "",
    "text": "This example demonstrates how to use workflow variables to map data between steps in a Mastra workflow. src/mastra/workflows/user-registration.ts import { Step, Workflow } from \" @mastra/core/workflows \"; \n import { z } from \" zod \"; \n \n // Define our schemas for better type safety \n const userInputSchema = z. object ({ \n email: z. string (). email (), \n name: z. string (), \n age: z. number (). min ( 18), \n}); \n \n const validatedDataSchema = z. object ({ \n isValid: z. boolean (), \n validatedData: z. object ({ \n email: z. string (), \n name: z. string (), \n age: z. number (), \n }), \n}); \n \n const formattedDataSchema = z. object ({ \n userId: z. string (), \n formattedData: z. object ({ \n email: z. string (), \n displayName: z. string (), \n ageGroup: z. string (), \n }), \n}); \n \n const profileSchema = z. object ({ \n profile: z. object ({ \n id: z. string (), \n email: z. string (), \n displayName: z. string (), \n ageGroup: z. string (), \n createdAt: z. string (), \n }), \n}); \n \n // Define the workflow \n const registrationWorkflow = new Workflow ({ \n name: \" user-registration \", \n triggerSchema: userInputSchema, \n}); \n \n // Step 1: Validate user input \n const validateInput = new Step ({ \n id: \" validateInput \", \n inputSchema: userInputSchema, \n outputSchema: validatedDataSchema, \n execute: async ({ context }) =&gt; { \n const { email, name, age } = context; \n \n // Simple validation logic \n const isValid = email. includes ( ' @ ') &amp;&amp; name.length &gt; 0 &amp;&amp; age &gt;= 18; \n \n return { \n isValid, \n validatedData: { \n email: email. toLowerCase (). trim (), \n name, \n age, \n }, \n }; \n }, \n}); \n \n // Step 2: Format user data \n const formatUserData = new Step ({ \n id: \" formatUserData \", \n inputSchema: z. object ({ \n validatedData: z. object ({ \n email: z. string (), \n name: z. string (), \n age: z. number (), \n }), \n }), \n outputSchema: formattedDataSchema, \n execute: async ({ context }) =&gt; { \n const { validatedData } = context; \n \n // Generate a simple user ID \n const userId = ` user_ ${ Math. floor (Math. random () * 10000)}`; \n \n // Format the data \n const ageGroup = validatedData.age &lt; 30 ? \" young-adult \" : \" adult \"; \n \n return { \n userId, \n formattedData: { \n email: validatedData.email, \n displayName: validatedData.name, \n ageGroup, \n }, \n }; \n }, \n}); \n \n // Step 3: Create user profile \n const createUserProfile = new Step ({ \n id: \" createUserProfile \", \n inputSchema: z. object ({ \n userId: z. string (), \n formattedData: z. object ({ \n email: z. string (), \n displayName: z. string (), \n ageGroup: z. string (), \n }), \n }), \n outputSchema: profileSchema, \n execute: async ({ context }) =&gt; { \n const { userId, formattedData } = context; \n \n // In a real app, you would save to a database here \n \n return { \n profile: { \n id: userId, \n ... formattedData, \n createdAt: new Date (). toISOString (), \n }, \n }; \n }, \n}); \n \n // Build the workflow with variable mappings \n registrationWorkflow \n // First step gets data from the trigger \n . step (validateInput, { \n variables: { \n email: { step: ' trigger ', path: ' email ' }, \n name: { step: ' trigger ', path: ' name ' }, \n age: { step: ' trigger ', path: ' age ' }, \n } \n }) \n // Format user data with validated data from previous step \n . then (formatUserData, { \n variables: { \n validatedData: { step: validateInput, path: ' validatedData ' }, \n }, \n when: { \n ref: { step: validateInput, path: ' isValid ' }, \n query: { $eq: true }, \n }, \n }) \n // Create profile with data from the format step \n . then (createUserProfile, { \n variables: { \n userId: { step: formatUserData, path: ' userId ' }, \n formattedData: { step: formatUserData, path: ' formattedData ' }, \n }, \n }) \n . commit (); \n \n export default registrationWorkflow; curl --location ' http://localhost:4111/api/workflows/user-registration/start-async ' \\ \n --header ' Content-Type: application/json ' \\ \n --data ' { \n \"email\": \"user@example.com\", \n \"name\": \"John Doe\", \n \"age\": 25 \n } '",
    "image": "https://mastra.ai/api/og/docs?title=Data%20Mapping%20with%20Workflow%20Variables%20|%20Mastra%20Examples&description=Learn%20how%20to%20use%20workflow%20variables%20to%20map%20data%20between%20steps%20in%20Mastra%20workflows.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/examples/workflows/workflow-variables",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}