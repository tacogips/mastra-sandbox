{
    "id": "https://mastra.ai/docs/rag/retrieval",
    "title": "Retrieval, Semantic Search, Reranking | RAG | Mastra Docs",
    "url": "https://mastra.ai/docs/rag/retrieval",
    "author": "",
    "text": "Retrieval in RAG Systems \n After storing embeddings, you need to retrieve relevant chunks to answer user queries. \n Mastra provides flexible retrieval options with support for semantic search, filtering, and re-ranking. \n How Retrieval Works \n \n The user’s query is converted to an embedding using the same model used for document embeddings \n This embedding is compared to stored embeddings using vector similarity \n The most similar chunks are retrieved and can be optionally: \n \n \n Filtered by metadata \n Re-ranked for better relevance \n Processed through a knowledge graph \n \n Basic Retrieval \n The simplest approach is direct semantic search. This method uses vector similarity to find chunks that are semantically similar to the query: \n Results include both the text content and a similarity score: \n For an example of how to use the basic retrieval method, see the Retrieve Results example. \n Advanced Retrieval options \n Metadata Filtering \n Filter results based on metadata fields to narrow down the search space. This is useful when you have documents from different sources, time periods, or with specific attributes. Mastra provides a unified MongoDB-style query syntax that works across all supported vector stores. \n For detailed information about available operators and syntax, see the Metadata Filters Reference. \n Basic filtering examples: \n Common use cases for metadata filtering: \n \n Filter by document source or type \n Filter by date ranges \n Filter by specific categories or tags \n Filter by numerical ranges (e.g., price, rating) \n Combine multiple conditions for precise querying \n Filter by document attributes (e.g., language, author) \n \n For an example of how to use metadata filtering, see the Hybrid Vector Search example. \n Vector Query Tool \n Sometimes you want to give your agent the ability to query a vector database directly. The Vector Query Tool allows your agent to be in charge of retrieval decisions, combining semantic search with optional filtering and reranking based on the agent’s understanding of the user’s needs. \n When creating the tool, pay special attention to the tool’s name and description - these help the agent understand when and how to use the retrieval capabilities. For example, you might name it “SearchKnowledgeBase” and describe it as “Search through our documentation to find relevant information about X topic.” \n This is particularly useful when: \n \n Your agent needs to dynamically decide what information to retrieve \n The retrieval process requires complex decision-making \n You want the agent to combine multiple retrieval strategies based on context \n \n For detailed configuration options and advanced usage, see the Vector Query Tool Reference. \n Vector Store Prompts \n Vector store prompts define query patterns and filtering capabilities for each vector database implementation.\nWhen implementing filtering, these prompts are required in the agent’s instructions to specify valid operators and syntax for each vector store implementation. \n Re-ranking \n Initial vector similarity search can sometimes miss nuanced relevance. Re-ranking is a more computationally expensive process, but more accurate algorithm that improves results by: \n \n Considering word order and exact matches \n Applying more sophisticated relevance scoring \n Using a method called cross-attention between query and documents \n \n Here’s how to use re-ranking: \n The re-ranked results combine vector similarity with semantic understanding to improve retrieval quality. \n For more details about re-ranking, see the rerank() method. \n For an example of how to use the re-ranking method, see the Re-ranking Results example. \n Graph-based Retrieval \n For documents with complex relationships, graph-based retrieval can follow connections between chunks. This helps when: \n \n Information is spread across multiple documents \n Documents reference each other \n You need to traverse relationships to find complete answers \n \n Example setup: \n For more details about graph-based retrieval, see the GraphRAG class and the createGraphQueryTool() function. \n For an example of how to use the graph-based retrieval method, see the Graph-based Retrieval example. Vector Databases Creating Projects",
    "image": "https://mastra.ai/api/og/docs?title=Retrieval%2C%20Semantic%20Search%2C%20Reranking%20%7C%20RAG%20%7C%20Mastra%20Docs",
    "extras": {
        "links": [
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples",
            "https://mastra.ai/showcase"
        ]
    }
}