{
    "id": "https://mastra.ai/docs/agents/runtime-variables",
    "title": "Runtime context | Agents | Mastra Docs",
    "url": "https://mastra.ai/docs/agents/runtime-variables",
    "author": "",
    "text": "\n Mastra provides runtime context, which is a system based on dependency injection that enables you to configure your agents and tools with runtime variables. If you find yourself creating several different agents that do very similar things, runtime context allows you to combine them into one agent. \n Overview \n The dependency injection system allows you to: \n \n Pass runtime configuration variables to agents through a type-safe runtimeContext \n Access these variables within tool execution contexts \n Modify agent behavior without changing the underlying code \n Share configuration across multiple tools within the same agent \n \n Basic Usage \n const agent = mastra. getAgent ( \" weatherAgent \"); \n \n // Define your runtimeContext's type structure \n type WeatherRuntimeContext = { \n \" temperature-scale \": \" celsius \" | \" fahrenheit \"; // Fixed typo in \"fahrenheit\" \n}; \n \n const runtimeContext = new RuntimeContext &lt; WeatherRuntimeContext &gt;(); \n runtimeContext. set ( \" temperature-scale \", \" celsius \"); \n \n const response = await agent. generate ( \" What's the weather like today? \", { \n runtimeContext, \n}); \n \n console. log (response.text); \n Using with REST API \n Here’s how to dynamically set temperature units based on a user’s location using the Cloudflare CF-IPCountry header: \n import { Mastra } from \" @mastra/core \"; \n import { RuntimeContext } from \" @mastra/core/di \"; \n import { agent as weatherAgent } from \"./agents/weather \"; \n \n // Define RuntimeContext type with clear, descriptive types \n type WeatherRuntimeContext = { \n \" temperature-scale \": \" celsius \" | \" fahrenheit \"; \n}; \n \n export const mastra = new Mastra ({ \n agents: { \n weather: weatherAgent, \n }, \n server: { \n middleware: [ \n async (c, next) =&gt; { \n const country = c.req. header ( \" CF-IPCountry \"); \n const runtimeContext = c. get &lt; WeatherRuntimeContext &gt;( \" runtimeContext \"); \n \n // Set temperature scale based on country \n runtimeContext. set ( \n \" temperature-scale \", \n country === \" US \" ? \" fahrenheit \" : \" celsius \", \n ); \n \n await next (); // Don't forget to call next() \n }, \n ], \n }, \n}); \n Creating Tools with Variables \n Tools can access runtimeContext variables and must conform to the agent’s runtimeContext type: \n import { createTool } from \" @mastra/core/tools \"; \n import { z } from \" zod \"; \n \n export const weatherTool = createTool ({ \n id: \" getWeather \", \n description: \" Get the current weather for a location \", \n inputSchema: z. object ({ \n location: z. string (). describe ( \" The location to get weather for \"), \n }), \n execute: async ({ context, runtimeContext }) =&gt; { \n // Type-safe access to runtimeContext variables \n const temperatureUnit = runtimeContext. get ( \" temperature-scale \"); \n \n const weather = await fetchWeather (context.location, { \n temperatureUnit, \n }); \n \n return { result: weather }; \n }, \n}); \n \n async function fetchWeather ( \n location: string, \n { temperatureUnit }: { temperatureUnit: \" celsius \" | \" fahrenheit \" }, \n): Promise &lt; WeatherResponse &gt; { \n // Implementation of weather API call \n const response = await weatherApi. fetch (location, temperatureUnit); \n \n return { \n location, \n temperature: \" 72°F \", \n conditions: \" Sunny \", \n unit: temperatureUnit, \n }; \n} Adding Voice Overview",
    "image": "https://mastra.ai/api/og/docs?title=Runtime%20context%20|%20Agents%20|%20Mastra%20Docs&description=Learn%20how%20to%20use%20Mastra%27s%20dependency%20injection%20system%20to%20provide%20runtime%20configuration%20to%20agents%20and%20tools.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/agents/runtime-variables",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}