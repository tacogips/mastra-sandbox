{
    "id": "https://mastra.ai/docs/tools-mcp/mcp-overview",
    "title": "MCP Overview | Tools & MCP | Mastra Docs",
    "url": "https://mastra.ai/docs/tools-mcp/mcp-overview",
    "publishedDate": "2000-01-01T00:00:00.000Z",
    "author": "",
    "text": "\n Model Context Protocol (MCP)  is an open standard designed to let AI models discover and interact with external tools and resources. Think of it as a universal plugin system for AI agents, allowing them to use tools regardless of the language they were written in or where they are hosted. \n Mastra uses MCP to connect agents to external tool servers. \n Use third-party tools with an MCP Client \n Mastra provides the MCPClient class to manage connections to one or more MCP servers and access their tools. \n Installation \n If you haven’t already, install the Mastra MCP package: \n npm install @mastra/mcp@latest \n Configuring MCPClient \n You configure MCPClient with a map of servers you want to connect to. It supports connections via subprocess (Stdio) or HTTP (Streamable HTTP with SSE fallback). \n import { MCPClient } from \" @mastra/mcp \"; \n \n const mcp = new MCPClient ({ \n servers: { \n // Stdio example \n sequential: { \n command: \" npx \", \n args: [ \" -y \", \" @modelcontextprotocol/server-sequential-thinking \"], \n }, \n // HTTP example \n weather: { \n url: new URL ( \" http://localhost:8080/mcp \"), \n requestInit: { \n headers: { \n Authorization: \" Bearer your-token \", \n }, \n }, \n }, \n }, \n}); \n For detailed configuration options, see the MCPClient reference documentation. \n Static vs Dynamic Tool Configurations \n MCPClient offers two approaches to retrieving tools from connected servers, suitable for different application architectures: \n Feature Static Configuration ( await mcp.getTools()) Dynamic Configuration ( await mcp.getToolsets()) Use Case Single-user, static config (e.g., CLI tool) Multi-user, dynamic config (e.g., SaaS app) Configuration Fixed at agent initialization Per-request, dynamic Credentials Shared across all uses Can vary per user/request Agent Setup Tools added in Agent constructor Tools passed in generate() or stream() options \n \n \n Static Configuration ( getTools()): Fetches all tools from all configured servers. Best when the tool configuration (like API keys) is static and shared across all users or requests. You typically call this once and pass the result to the tools property when defining your Agent.\n Reference: getTools() \n import { Agent } from \" @mastra/core/agent \"; \n // ... mcp client setup \n \n const agent = new Agent ({ \n // ... other agent config \n tools: await mcp. getTools (), \n}); \n \n \n Dynamic Configuration ( getToolsets()): Designed for scenarios where configuration might change per request or per user (e.g., different API keys for different tenants in a multi-user application). You pass the result of getToolsets() to the toolsets option in the agent’s generate() or stream() method.\n Reference: getToolsets() \n import { Agent } from \" @mastra/core/agent \"; \n // ... agent setup without tools initially \n \n async function handleRequest (userPrompt: string, userApiKey: string) { \n const userMcp = new MCPClient ({ /* config with userApiKey */ }); \n const toolsets = await userMcp. getToolsets (); \n \n const response = await agent. stream (userPrompt, { \n toolsets, // Pass dynamic toolsets \n }); \n // ... handle response \n await userMcp. disconnect (); \n} \n \n \n Connecting to an MCP registry \n MCP servers can be discovered through registries. Here’s how to connect to some popular ones using MCPClient: \n mcp.run mcp.run  provides pre-authenticated, managed MCP servers. Tools are grouped into Profiles, each with a unique, signed URL. import { MCPClient } from \" @mastra/mcp \"; \n \n const mcp = new MCPClient ({ \n servers: { \n marketing: { // Example profile name \n url: new URL (process.env.MCP_RUN_SSE_URL!), // Get URL from mcp.run profile \n }, \n }, \n}); \n Important: Treat the mcp.run SSE URL like a password. Store it securely, for example, in an environment variable. \n MCP_RUN_SSE_URL = https://www.mcp.run/api/mcp/sse? nonce =... \n \n If you have created your own Mastra tools, you can expose them to any MCP-compatible client using Mastra’s MCPServer class. \n This allows others to use your tools without needing direct access to your codebase. \n Using MCPServer \n You initialize MCPServer with a name, version, and the Mastra tools you want to share. \n import { MCPServer } from \" @mastra/mcp \"; \n import { weatherTool } from \"./tools \"; // Your Mastra tool \n \n const server = new MCPServer ({ \n name: \" My Weather Server \", \n version: \" 1.0.0 \", \n tools: { weatherTool }, // Provide your tool(s) here \n}); \n \n // Start the server (e.g., using stdio for a CLI tool) \n // await server.startStdio(); \n \n // Or integrate with an HTTP server using startSSE() \n // See MCPServer reference for details \n For detailed usage and examples, see the MCPServer reference documentation. Overview Dynamic Tool Context",
    "image": "https://mastra.ai/api/og/docs?title=MCP%20Overview%20|%20Tools%20&%20MCP%20|%20Mastra%20Docs&description=Learn%20about%20the%20Model%20Context%20Protocol%20(MCP),%20how%20to%20use%20third-party%20tools%20via%20MCPClient,%20connect%20to%20registries,%20and%20share%20your%20own%20tools%20using%20MCPServer.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/tools-mcp/mcp-overview",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}