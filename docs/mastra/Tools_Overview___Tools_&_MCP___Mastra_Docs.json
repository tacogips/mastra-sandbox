{
    "id": "https://mastra.ai/docs/tools-mcp/overview",
    "title": "Tools Overview | Tools & MCP | Mastra Docs",
    "url": "https://mastra.ai/docs/tools-mcp/overview",
    "author": "",
    "text": "\n Tools are functions that agents can execute to perform specific tasks or access external information. They extend an agent’s capabilities beyond simple text generation, allowing interaction with APIs, databases, or other systems. \n Each tool typically defines: \n \n Inputs: What information the tool needs to run (defined with an inputSchema, often using Zod). \n Outputs: The structure of the data the tool returns (defined with an outputSchema). \n Execution Logic: The code that performs the tool’s action. \n Description: Text that helps the agent understand what the tool does and when to use it. \n \n Creating Tools \n In Mastra, you create tools using the createTool function from the @mastra/core/tools package. \n src/mastra/tools/weatherInfo.ts import { createTool } from \" @mastra/core/tools \"; \n import { z } from \" zod \"; \n \n const getWeatherInfo = async (city: string) =&gt; { \n // Replace with an actual API call to a weather service \n console. log ( ` Fetching weather for ${ city}... `); \n // Example data structure \n return { temperature: 20, conditions: \" Sunny \" }; \n}; \n \n export const weatherTool = createTool ({ \n id: \" Get Weather Information \", \n description: ` Fetches the current weather information for a given city `, \n inputSchema: z. object ({ \n city: z. string (). describe ( \" City name \"), \n }), \n outputSchema: z. object ({ \n temperature: z. number (), \n conditions: z. string (), \n }), \n execute: async ({ context: { city } }) =&gt; { \n console. log ( \" Using tool to fetch weather information for \", city); \n return await getWeatherInfo (city); \n }, \n}); \n This example defines a weatherTool with an input schema for the city, an output schema for the weather data, and an execute function that contains the tool’s logic. \n When creating tools, keep tool descriptions simple and focused on what the tool does and when to use it, emphasizing its primary use case. Technical details belong in the parameter schemas, guiding the agent on how to use the tool correctly with descriptive names, clear descriptions, and explanations of default values. \n Adding Tools to an Agent \n To make tools available to an agent, you configure them in the agent’s definition. Mentioning available tools and their general purpose in the agent’s system prompt can also improve tool usage. For detailed steps and examples, see the guide on Using Tools and MCP with Agents. \n Compatibility Layer for Tool Schemas \n Different models interpret schemas differely. Some error when certain schema properties are passed and some ignore certain schema properties but don’t throw an error. Mastra adds a compatibility layer for tool schemas, ensuring tools work consistently across different model providers and that the schema constraints are respected. \n Some providers that we include this layer for: \n \n Google Gemini &amp; Anthropic: Remove unsupported schema properties and append relevant constraints to the tool description. \n OpenAI (including reasoning models): Strip or adapt schema fields that are ignored or unsupported, and add instructions to the description for agent guidance. \n DeepSeek &amp; Meta: Apply similar compatibility logic to ensure schema alignment and tool usability. \n \n This approach makes tool usage more reliable and model-agnostic for both custom and MCP tools. Runtime Context MCP Overview",
    "image": "https://mastra.ai/api/og/docs?title=Tools%20Overview%20|%20Tools%20&%20MCP%20|%20Mastra%20Docs&description=Understand%20what%20tools%20are%20in%20Mastra,%20how%20to%20add%20them%20to%20agents,%20and%20best%20practices%20for%20designing%20effective%20tools.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/tools-mcp/overview",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}