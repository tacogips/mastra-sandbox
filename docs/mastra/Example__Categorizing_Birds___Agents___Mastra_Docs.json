{
    "id": "https://mastra.ai/examples/agents/bird-checker",
    "title": "Example: Categorizing Birds | Agents | Mastra Docs",
    "url": "https://mastra.ai/examples/agents/bird-checker",
    "publishedDate": "2024-03-07T00:00:00.000Z",
    "author": "",
    "text": "Example: Categorizing Birds with an AI Agent \n We will get a random image from Unsplashâ€‰ that matches a selected query and uses a Mastra AI Agent to determine if it is a bird or not. \n import { anthropic } from \" @ai-sdk/anthropic \"; \n import { Agent } from \" @mastra/core/agent \"; \n import { z } from \" zod \"; \n \n export type Image = { \n alt_description: string; \n urls: { \n regular: string; \n raw: string; \n }; \n user: { \n first_name: string; \n links: { \n html: string; \n }; \n }; \n}; \n \n export type ImageResponse &lt; T, K &gt; = \n | { \n ok: true; \n data: T; \n } \n | { \n ok: false; \n error: K; \n }; \n \n const getRandomImage = async ({ \n query, \n}: { \n query: string; \n}): Promise &lt; ImageResponse &lt; Image, string &gt;&gt; =&gt; { \n const page = Math. floor (Math. random () * 20); \n const order_by = Math. random () &lt; 0.5 ? \" relevant \" : \" latest \"; \n try { \n const res = await fetch ( \n ` https://api.unsplash.com/search/photos?query= ${ query} &amp;page= ${ page} &amp;order_by= ${ order_by}`, \n { \n method: \" GET \", \n headers: { \n Authorization: ` Client-ID ${ process.env.UNSPLASH_ACCESS_KEY}`, \n \" Accept-Version \": \" v1 \", \n }, \n cache: \" no-store \", \n }, \n ); \n \n if (! res.ok) { \n return { \n ok: false, \n error: \" Failed to fetch image \", \n }; \n } \n \n const data = ( await res. json ()) as { \n results: Array &lt; Image &gt;; \n }; \n const randomNo = Math. floor (Math. random () * data.results. length); \n \n return { \n ok: true, \n data: data.results[randomNo] as Image, \n }; \n } catch (err) { \n return { \n ok: false, \n error: \" Error fetching image \", \n }; \n } \n}; \n \n const instructions = ` \n You can view an image and figure out if it is a bird or not. \n You can also figure out the species of the bird and where the picture was taken. \n `; \n \n export const birdCheckerAgent = new Agent ({ \n name: \" Bird checker \", \n instructions, \n model: anthropic ( \" claude-3-haiku-20240307 \"), \n}); \n \n const queries: string [] = [ \" wildlife \", \" feathers \", \" flying \", \" birds \"]; \n const randomQuery = queries[Math. floor (Math. random () * queries.length)]; \n \n // Get the image url from Unsplash with random type \n const imageResponse = await getRandomImage ({ query: randomQuery }); \n \n if (! imageResponse.ok) { \n console. log ( \" Error fetching image \", imageResponse.error); \n process. exit ( 1); \n} \n \n console. log ( \" Image URL: \", imageResponse.data.urls.regular); \n const response = await birdCheckerAgent. generate ( \n [ \n { \n role: \" user \", \n content: [ \n { \n type: \" image \", \n image: new URL (imageResponse.data.urls.regular), \n }, \n { \n type: \" text \", \n text: \" view this image and let me know if it's a bird or not, and the scientific name of the bird without any explanation. Also summarize the location for this picture in one or two short sentences understandable by a high school student \", \n }, \n ], \n }, \n ], \n { \n output: z. object ({ \n bird: z. boolean (), \n species: z. string (), \n location: z. string (), \n }), \n }, \n); \n \n console. log (response.object); \n \n Multi-Agent Workflow Give your Agent a voice",
    "image": "https://mastra.ai/api/og/docs?title=Example:%20Categorizing%20Birds%20|%20Agents%20|%20Mastra%20Docs&description=Example%20of%20using%20a%20Mastra%20AI%20Agent%20to%20determine%20if%20an%20image%20from%20Unsplash%20depicts%20a%20bird.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/examples/agents/bird-checker",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}