{
    "id": "https://mastra.ai/examples/agents/agentic-workflows",
    "title": "Example: Calling Agentic Workflows | Agents | Mastra Docs",
    "url": "https://mastra.ai/examples/agents/agentic-workflows",
    "publishedDate": "",
    "author": "",
    "text": "When building AI applications, you often need to coordinate multiple steps that depend on each other‚Äôs outputs. This example shows how to create an AI workflow that fetches weather data and uses it to suggest activities, demonstrating how to integrate external APIs with LLM-powered planning. import { Mastra } from \" @mastra/core \"; \n import { Agent } from \" @mastra/core/agent \"; \n import { Step, Workflow } from \" @mastra/core/workflows \"; \n import { z } from \" zod \"; \n import { openai } from \" @ai-sdk/openai \"; \n \n const agent = new Agent ({ \n name: ' Weather Agent ', \n instructions: ` \n You are a local activities and travel expert who excels at weather-based planning. Analyze the weather data and provide practical activity recommendations. \n For each day in the forecast, structure your response exactly as follows: \n üìÖ [Day, Month Date, Year] \n ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê \n üå°Ô∏è WEATHER SUMMARY \n ‚Ä¢ Conditions: [brief description] \n ‚Ä¢ Temperature: [X¬∞C/Y¬∞F to A¬∞C/B¬∞F] \n ‚Ä¢ Precipitation: [X% chance] \n üåÖ MORNING ACTIVITIES \n Outdoor: \n ‚Ä¢ [Activity Name] - [Brief description including specific location/route] \n Best timing: [specific time range] \n Note: [relevant weather consideration] \n üåû AFTERNOON ACTIVITIES \n Outdoor: \n ‚Ä¢ [Activity Name] - [Brief description including specific location/route] \n Best timing: [specific time range] \n Note: [relevant weather consideration] \n üè† INDOOR ALTERNATIVES \n ‚Ä¢ [Activity Name] - [Brief description including specific venue] \n Ideal for: [weather condition that would trigger this alternative] \n ‚ö†Ô∏è SPECIAL CONSIDERATIONS \n ‚Ä¢ [Any relevant weather warnings, UV index, wind conditions, etc.] \n Guidelines: \n - Suggest 2-3 time-specific outdoor activities per day \n - Include 1-2 indoor backup options \n - For precipitation &gt;50%, lead with indoor activities \n - All activities must be specific to the location \n - Include specific venues, trails, or locations \n - Consider activity intensity based on temperature \n - Keep descriptions concise but informative \n Maintain this exact formatting for consistency, using the emoji and section headers as shown. \n `, \n model: openai ( ' gpt-4o-mini '), \n}); \n \n const fetchWeather = new Step ({ \n id: \" fetch-weather \", \n description: \" Fetches weather forecast for a given city \", \n inputSchema: z. object ({ \n city: z. string (). describe ( \" The city to get the weather for \"), \n }), \n execute: async ({ context }) =&gt; { \n const triggerData = context?. getStepResult &lt;{ \n city: string; \n }&gt;( \" trigger \"); \n \n if (! triggerData) { \n throw new Error ( \" Trigger data not found \"); \n } \n \n const geocodingUrl = ` https://geocoding-api.open-meteo.com/v1/search?name= ${ encodeURIComponent (triggerData.city)} &amp;count=1 `; \n const geocodingResponse = await fetch (geocodingUrl); \n const geocodingData = await geocodingResponse. json (); \n \n if (! geocodingData.results?.[ 0]) { \n throw new Error ( ` Location ' ${ triggerData.city} ' not found `); \n } \n \n const { latitude, longitude, name } = geocodingData.results[ 0]; \n \n const weatherUrl = ` https://api.open-meteo.com/v1/forecast?latitude= ${ latitude} &amp;longitude= ${ longitude} &amp;daily=temperature_2m_max,temperature_2m_min,precipitation_probability_mean,weathercode&amp;timezone=auto `; \n const response = await fetch (weatherUrl); \n const data = await response. json (); \n \n const forecast = data.daily.time. map ((date: string, index: number) =&gt; ({ \n date, \n maxTemp: data.daily.temperature_2m_max[index], \n minTemp: data.daily.temperature_2m_min[index], \n precipitationChance: data.daily.precipitation_probability_mean[index], \n condition: getWeatherCondition (data.daily.weathercode[index]), \n location: name, \n })); \n \n return forecast; \n }, \n}); \n \n const forecastSchema = z. array ( \n z. object ({ \n date: z. string (), \n maxTemp: z. number (), \n minTemp: z. number (), \n precipitationChance: z. number (), \n condition: z. string (), \n location: z. string (), \n }), \n); \n \n const planActivities = new Step ({ \n id: \" plan-activities \", \n description: \" Suggests activities based on weather conditions \", \n inputSchema: forecastSchema, \n execute: async ({ context, mastra }) =&gt; { \n const forecast = \n context?. getStepResult &lt;z. infer &lt; typeof forecastSchema&gt;&gt;( \n \" fetch-weather \", \n ); \n \n if (! forecast) { \n throw new Error ( \" Forecast data not found \"); \n } \n \n const prompt = ` Based on the following weather forecast for ${ forecast[ 0].location}, suggest appropriate activities: \n ${ JSON. stringify (forecast, null, 2)} \n `; \n \n const response = await agent. stream ([ \n { \n role: \" user \", \n content: prompt, \n }, \n ]); \n \n let activitiesText = ''; \n \n for await ( const chunk of response.textStream) { \n process.stdout. write (chunk); \n activitiesText += chunk; \n } \n \n return { \n activities: activitiesText, \n }; \n }, \n}); \n \n function getWeatherCondition (code: number): string { \n const conditions: Record &lt; number, string &gt; = { \n 0: \" Clear sky \", \n 1: \" Mainly clear \", \n 2: \" Partly cloudy \", \n 3: \" Overcast \", \n 45: \" Foggy \", \n 48: \" Depositing rime fog \", \n 51: \" Light drizzle \", \n 53: \" Moderate drizzle \", \n 55: \" Dense drizzle \", \n 61: \" Slight rain \", \n 63: \" Moderate rain \", \n 65: \" Heavy rain \", \n 71: \" Slight snow fall \", \n 73: \" Moderate snow fall \", \n 75: \" Heavy snow fall \", \n 95: \" Thunderstorm \", \n }; \n return conditions[code] || \" Unknown \"; \n} \n \n const weatherWorkflow = new Workflow ({ \n name: \" weather-workflow \", \n triggerSchema: z. object ({ \n city: z. string (). describe ( \" The city to get the weather for \"), \n }), \n}) \n . step (fetchWeather) \n . then (planActivities); \n \n weatherWorkflow. commit (); \n \n const mastra = new Mastra ({ \n workflows: { \n weatherWorkflow, \n }, \n}); \n \n async function main () { \n const { start } = mastra. getWorkflow ( \" weatherWorkflow \"). createRun (); \n \n const result = await start ({ \n triggerData: { \n city: \" London \", \n }, \n }); \n \n console. log ( \" \\n \\n \"); \n console. log (result); \n} \n \n main ();",
    "image": "https://mastra.ai/api/og/docs?title=Example:%20Calling%20Agentic%20Workflows%20|%20Agents%20|%20Mastra%20Docs&description=Example%20of%20creating%20AI%20workflows%20in%20Mastra,%20demonstrating%20integration%20of%20external%20APIs%20with%20LLM-powered%20planning.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/examples/agents/agentic-workflows",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}