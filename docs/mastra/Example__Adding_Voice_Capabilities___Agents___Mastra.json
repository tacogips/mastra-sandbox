{
    "id": "https://mastra.ai/examples/agents/adding-voice-capabilities",
    "title": "Example: Adding Voice Capabilities | Agents | Mastra",
    "url": "https://mastra.ai/examples/agents/adding-voice-capabilities",
    "publishedDate": "",
    "author": "",
    "text": "Giving your Agent a Voice \n This example demonstrates how to add voice capabilities to Mastra agents, enabling them to speak and listen using different voice providers. We’ll create two agents with different voice configurations and show how they can interact using speech. \n The example showcases: \n \n Using CompositeVoice to combine different providers for speaking and listening \n Using a single provider for both capabilities \n Basic voice interactions between agents \n \n First, let’s import the required dependencies and set up our agents: \n // Import required dependencies \n import { openai } from ' @ai-sdk/openai '; \n import { Agent } from ' @mastra/core/agent '; \n import { CompositeVoice } from ' @mastra/core/voice '; \n import { OpenAIVoice } from ' @mastra/voice-openai '; \n import { createReadStream, createWriteStream } from ' fs '; \n import { PlayAIVoice } from ' @mastra/voice-playai '; \n import path from ' path '; \n \n // Initialize Agent 1 with both listening and speaking capabilities \n const agent1 = new Agent ({ \n name: ' Agent1 ', \n instructions: ` You are an agent with both STT and TTS capabilities. `, \n model: openai ( ' gpt-4o '), \n voice: new CompositeVoice ({ \n input: new OpenAIVoice (), // For converting speech to text \n output: new PlayAIVoice (), // For converting text to speech \n }), \n}); \n \n // Initialize Agent 2 with just OpenAI for both listening and speaking capabilities \n const agent2 = new Agent ({ \n name: ' Agent2 ', \n instructions: ` You are an agent with both STT and TTS capabilities. `, \n model: openai ( ' gpt-4o '), \n voice: new OpenAIVoice (), \n}); \n In this setup: \n \n Agent1 uses a CompositeVoice that combines OpenAI for speech-to-text and PlayAI for text-to-speech \n Agent2 uses OpenAI’s voice capabilities for both functions \n \n Now let’s demonstrate a basic interaction between the agents: \n // Step 1: Agent 1 speaks a question and saves it to a file \n const audio1 = await agent1.voice. speak ( ' What is the meaning of life in one sentence? '); \n await saveAudioToFile (audio1, ' agent1-question.mp3 '); \n \n // Step 2: Agent 2 listens to Agent 1's question \n const audioFilePath = path. join (process. cwd (), ' agent1-question.mp3 '); \n const audioStream = createReadStream (audioFilePath); \n const audio2 = await agent2.voice. listen (audioStream); \n const text = await convertToText (audio2); \n \n // Step 3: Agent 2 generates and speaks a response \n const agent2Response = await agent2. generate (text); \n const agent2ResponseAudio = await agent2.voice. speak (agent2Response.text); \n await saveAudioToFile (agent2ResponseAudio, ' agent2-response.mp3 '); \n Here’s what’s happening in the interaction: \n \n Agent1 converts text to speech using PlayAI and saves it to a file (we save the audio so you can hear the interaction) \n Agent2 listens to the audio file using OpenAI’s speech-to-text \n Agent2 generates a response and converts it to speech \n \n The example includes helper functions for handling audio files: \n /** \n * Saves an audio stream to a file \n */ \n async function saveAudioToFile (audio: NodeJS. ReadableStream, filename: string): Promise &lt; void &gt; { \n const filePath = path. join (process. cwd (), filename); \n const writer = createWriteStream (filePath); \n audio. pipe (writer); \n return new Promise &lt; void &gt;((resolve, reject) =&gt; { \n writer. on ( ' finish ', resolve); \n writer. on ( ' error ', reject); \n }); \n} \n \n /** \n * Converts either a string or a readable stream to text \n */ \n async function convertToText (input: string | NodeJS. ReadableStream): Promise &lt; string &gt; { \n if ( typeof input === ' string ') { \n return input; \n } \n \n const chunks: Buffer [] = []; \n return new Promise &lt; string &gt;((resolve, reject) =&gt; { \n input. on ( ' data ', chunk =&gt; chunks. push (Buffer. from (chunk))); \n input. on ( ' error ', err =&gt; reject (err)); \n input. on ( ' end ', () =&gt; resolve (Buffer. concat (chunks). toString ( ' utf-8 '))); \n }); \n} \n Key Points \n \n The voice property in the Agent configuration accepts any implementation of MastraVoice \n CompositeVoice allows using different providers for speaking and listening \n Audio can be handled as streams, making it efficient for real-time processing \n Voice capabilities can be combined with the agent’s natural language processing \n \n \n Bird Checker Deploying an MCPServer",
    "image": "https://mastra.ai/api/og/docs?title=Example:%20Adding%20Voice%20Capabilities%20|%20Agents%20|%20Mastra&description=Example%20of%20adding%20voice%20capabilities%20to%20Mastra%20agents,%20enabling%20them%20to%20speak%20and%20listen%20using%20different%20voice%20providers.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/examples/agents/adding-voice-capabilities",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}