{
    "id": "https://mastra.ai/docs/workflows/variables",
    "title": "Data Mapping with Workflow Variables | Mastra Docs",
    "url": "https://mastra.ai/docs/workflows/variables",
    "author": "",
    "text": "\n Workflow variables in Mastra provide a powerful mechanism for mapping data between steps, allowing you to create dynamic data flows and pass information from one step to another. \n Understanding Workflow Variables \n In Mastra workflows, variables serve as a way to: \n \n Map data from trigger inputs to step inputs \n Pass outputs from one step to inputs of another step \n Access nested properties within step outputs \n Create more flexible and reusable workflow steps \n \n Using Variables for Data Mapping \n Basic Variable Mapping \n You can map data between steps using the variables property when adding a step to your workflow: \n src/mastra/workflows/index.ts const workflow = new Workflow ({ \n name: ' data-mapping-workflow ', \n triggerSchema: z. object ({ \n inputData: z. string (), \n }), \n}); \n \n workflow \n . step (step1, { \n variables: { \n // Map trigger data to step input \n inputData: { step: ' trigger ', path: ' inputData ' } \n } \n }) \n . then (step2, { \n variables: { \n // Map output from step1 to input for step2 \n previousValue: { step: step1, path: ' outputField ' } \n } \n }) \n . commit (); \n \n // Register the workflow with Mastra \n export const mastra = new Mastra ({ \n workflows: { workflow }, \n }); \n Accessing Nested Properties \n You can access nested properties using dot notation in the path field: \n src/mastra/workflows/index.ts workflow \n . step (step1) \n . then (step2, { \n variables: { \n // Access a nested property from step1's output \n nestedValue: { step: step1, path: ' nested.deeply.value ' } \n } \n }) \n . commit (); \n Mapping Entire Objects \n You can map an entire object by using. as the path: \n src/mastra/workflows/index.ts workflow \n . step (step1, { \n variables: { \n // Map the entire trigger data object \n triggerData: { step: ' trigger ', path: '. ' } \n } \n }) \n . commit (); \n Variables in Loops \n Variables can also be passed to while and until loops. This is useful for passing data between iterations or from outside steps: \n src/mastra/workflows/loop-variables.ts // Step that increments a counter \n const incrementStep = new Step ({ \n id: ' increment ', \n inputSchema: z. object ({ \n // Previous value from last iteration \n prevValue: z. number (). optional (), \n }), \n outputSchema: z. object ({ \n // Updated counter value \n updatedCounter: z. number (), \n }), \n execute: async ({ context }) =&gt; { \n const { prevValue = 0 } = context.inputData; \n return { updatedCounter: prevValue + 1 }; \n }, \n}); \n \n const workflow = new Workflow ({ \n name: ' counter ' \n}); \n \n workflow \n . step (incrementStep) \n . while ( \n async ({ context }) =&gt; { \n // Continue while counter is less than 10 \n const result = context. getStepResult (incrementStep); \n return (result?.updatedCounter ?? 0) &lt; 10; \n }, \n incrementStep, \n { \n // Pass previous value to next iteration \n prevValue: { \n step: incrementStep, \n path: ' updatedCounter ' \n } \n } \n ); \n Variable Resolution \n When a workflow executes, Mastra resolves variables at runtime by: \n \n Identifying the source step specified in the step property \n Retrieving the output from that step \n Navigating to the specified property using the path \n Injecting the resolved value into the target stepâ€™s context as the inputData property \n \n Examples \n Mapping from Trigger Data \n This example shows how to map data from the workflow trigger to a step: \n src/mastra/workflows/trigger-mapping.ts import { Step, Workflow, Mastra } from \" @mastra/core \"; \n import { z } from \" zod \"; \n \n // Define a step that needs user input \n const processUserInput = new Step ({ \n id: \" processUserInput \", \n execute: async ({ context }) =&gt; { \n // The inputData will be available in context because of the variable mapping \n const { inputData } = context.inputData; \n \n return { \n processedData: ` Processed: ${ inputData}` \n }; \n }, \n}); \n \n // Create the workflow \n const workflow = new Workflow ({ \n name: \" trigger-mapping \", \n triggerSchema: z. object ({ \n inputData: z. string (), \n }), \n}); \n \n // Map the trigger data to the step \n workflow \n . step (processUserInput, { \n variables: { \n inputData: { step: ' trigger ', path: ' inputData ' }, \n } \n }) \n . commit (); \n \n // Register the workflow with Mastra \n export const mastra = new Mastra ({ \n workflows: { workflow }, \n }); \n Mapping Between Steps \n This example demonstrates mapping data from one step to another: \n src/mastra/workflows/step-mapping.ts import { Step, Workflow, Mastra } from \" @mastra/core \"; \n import { z } from \" zod \"; \n \n // Step 1: Generate data \n const generateData = new Step ({ \n id: \" generateData \", \n outputSchema: z. object ({ \n nested: z. object ({ \n value: z. string (), \n }), \n }), \n execute: async () =&gt; { \n return { \n nested: { \n value: \" step1-data \" \n } \n }; \n }, \n}); \n \n // Step 2: Process the data from step 1 \n const processData = new Step ({ \n id: \" processData \", \n inputSchema: z. object ({ \n previousValue: z. string (), \n }), \n execute: async ({ context }) =&gt; { \n // previousValue will be available because of the variable mapping \n const { previousValue } = context.inputData; \n \n return { \n result: ` Processed: ${ previousValue}` \n }; \n }, \n}); \n \n // Create the workflow \n const workflow = new Workflow ({ \n name: \" step-mapping \", \n}); \n \n // Map data from step1 to step2 \n workflow \n . step (generateData) \n . then (processData, { \n variables: { \n // Map the nested.value property from generateData's output \n previousValue: { step: generateData, path: ' nested.value ' }, \n } \n }) \n . commit (); \n \n // Register the workflow with Mastra \n export const mastra = new Mastra ({ \n workflows: { workflow }, \n }); \n Type Safety \n Mastra provides type safety for variable mappings when using TypeScript: \n src/mastra/workflows/type-safe.ts import { Step, Workflow, Mastra } from \" @mastra/core \"; \n import { z } from \" zod \"; \n \n // Define schemas for better type safety \n const triggerSchema = z. object ({ \n inputValue: z. string (), \n}); \n \n type TriggerType = z. infer &lt; typeof triggerSchema&gt;; \n \n // Step with typed context \n const step1 = new Step ({ \n id: \" step1 \", \n outputSchema: z. object ({ \n nested: z. object ({ \n value: z. string (), \n }), \n }), \n execute: async ({ context }) =&gt; { \n // TypeScript knows the shape of triggerData \n const triggerData = context. getStepResult &lt; TriggerType &gt;( ' trigger '); \n \n return { \n nested: { \n value: ` processed- ${ triggerData?.inputValue}` \n } \n }; \n }, \n}); \n \n // Create the workflow with the schema \n const workflow = new Workflow ({ \n name: \" type-safe-workflow \", \n triggerSchema, \n}); \n \n workflow. step (step1). commit (); \n \n // Register the workflow with Mastra \n export const mastra = new Mastra ({ \n workflows: { workflow }, \n }); \n Best Practices \n \n \n Validate Inputs and Outputs: Use inputSchema and outputSchema to ensure data consistency. \n \n \n Keep Mappings Simple: Avoid overly complex nested paths when possible. \n \n \n Consider Default Values: Handle cases where mapped data might be undefined. \n \n \n Comparison with Direct Context Access \n While you can access previous step results directly via context.steps, using variable mappings offers several advantages: \n Feature Variable Mapping Direct Context Access Clarity Explicit data dependencies Implicit dependencies Reusability Steps can be reused with different mappings Steps are tightly coupled Type Safety Better TypeScript integration Requires manual type assertions",
    "image": "https://mastra.ai/api/og/docs?title=Data%20Mapping%20with%20Workflow%20Variables%20|%20Mastra%20Docs&description=Learn%20how%20to%20use%20workflow%20variables%20to%20map%20data%20between%20steps%20and%20create%20dynamic%20data%20flows%20in%20your%20Mastra%20workflows.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/workflows/variables",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}