{
    "id": "https://mastra.ai/docs/frameworks/next-js",
    "title": "Getting started with Mastra and NextJS | Mastra Guides",
    "url": "https://mastra.ai/docs/frameworks/next-js",
    "publishedDate": "",
    "author": "",
    "text": "Integrate Mastra in your Next.js project \n There are two main ways to integrate Mastra with your Next.js application: as a separate backend service or directly integrated into your Next.js app. \n 1. Separate Backend Integration \n Best for larger projects where you want to: \n \n Scale your AI backend independently \n Keep clear separation of concerns \n Have more deployment flexibility \n \n Create Mastra Backend Create a new Mastra project using our CLI: npx For detailed setup instructions, see our installation guide. Install MastraClient npm npm install @mastra/client-js@latest Use MastraClient Create a client instance and use it in your Next.js application: import { MastraClient } from ' @mastra/client-js '; \n \n // Initialize the client \n export const mastraClient = new MastraClient ({ \n baseUrl: process.env.NEXT_PUBLIC_MASTRA_API_URL || ' http://localhost:4111 ', \n}); Example usage in your React component: app/components/SimpleWeather.tsx ' use client ' \n \n import { mastraClient } from ' @/lib/mastra ' \n \n export function SimpleWeather () { \n async function handleSubmit (formData: FormData) { \n const city = formData. get ( ' city ') \n const agent = mastraClient. getAgent ( ' weatherAgent ') \n \n try { \n const response = await agent. generate ({ \n messages: [{ role: ' user ', content: ` What's the weather like in ${ city}? ` }], \n }) \n // Handle the response \n console. log (response.text) \n } catch (error) { \n console. error ( ' Error: ', error) \n } \n } \n \n return ( \n &lt; form action = {handleSubmit} &gt; \n &lt; input name = \" city \" placeholder = \" Enter city name \" /&gt; \n &lt; button type = \" submit \" &gt; Get Weather &lt;/ button &gt; \n &lt;/ form &gt; \n ) \n} Deployment When you’re ready to deploy, you can use any of our platform-specific deployers (Vercel, Netlify, Cloudflare) or deploy to any Node.js hosting platform. Check our deployment guide for detailed instructions. \n 2. Direct Integration \n Better for smaller projects or prototypes. This approach bundles Mastra directly with your Next.js application. \n Initialize Mastra in your Next.js Root First, navigate to your Next.js project root and initialize Mastra: Then run the initialization command: npm This will set up Mastra in your Next.js project. For more details about init and other configuration options, see our mastra init reference. Configure Next.js Add to your next.config.js: /** @ type { import('next').NextConfig} */ \n const nextConfig = { \n serverExternalPackages: [ \" @mastra/* \"], \n // ... your other Next.js config \n} \n \n module. exports = nextConfig Server Actions Example ' use server ' \n \n import { mastra } from ' @/mastra ' \n \n export async function getWeatherInfo (city: string) { \n const agent = mastra. getAgent ( ' weatherAgent ') \n \n const result = await agent. generate ( ` What's the weather like in ${ city}? `) \n \n return result \n} Use it in your component: app/components/Weather.tsx ' use client ' \n \n import { getWeatherInfo } from '../actions ' \n \n export function Weather () { \n async function handleSubmit (formData: FormData) { \n const city = formData. get ( ' city ') as string \n const result = await getWeatherInfo (city) \n // Handle the result \n console. log (result) \n } \n \n return ( \n &lt; form action = {handleSubmit} &gt; \n &lt; input name = \" city \" placeholder = \" Enter city name \" /&gt; \n &lt; button type = \" submit \" &gt; Get Weather &lt;/ button &gt; \n &lt;/ form &gt; \n ) \n} API Routes Example import { mastra } from ' @/mastra ' \n import { NextResponse } from ' next/server ' \n \n export async function POST (req: Request) { \n const { city } = await req. json () \n const agent = mastra. getAgent ( ' weatherAgent ') \n \n const result = await agent. stream ( ` What's the weather like in ${ city}? `) \n \n return result. toDataStreamResponse () \n} Deployment When using direct integration, your Mastra instance will be deployed alongside your Next.js application. Ensure you: \n Set up environment variables for your LLM API keys in your deployment platform \n Implement proper error handling for production use \n Monitor your AI agent’s performance and costs \n \n Observability \n Mastra provides built-in observability features to help you monitor, debug, and optimize your AI operations. This includes: \n \n Tracing of AI operations and their performance \n Logging of prompts, completions, and errors \n Integration with observability platforms like Langfuse and LangSmith \n \n For detailed setup instructions and configuration options specific to Next.js local development, see our Next.js Observability Configuration Guide. With Vercel AI SDK With CopilotKit",
    "image": "https://mastra.ai/api/og/docs?title=Getting%20started%20with%20Mastra%20and%20NextJS%20|%20Mastra%20Guides&description=Guide%20on%20integrating%20Mastra%20with%20NextJS.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/frameworks/next-js",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}