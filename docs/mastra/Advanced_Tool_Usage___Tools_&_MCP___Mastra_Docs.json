{
    "id": "https://mastra.ai/docs/tools-mcp/advanced-usage",
    "title": "Advanced Tool Usage | Tools & MCP | Mastra Docs",
    "url": "https://mastra.ai/docs/tools-mcp/advanced-usage",
    "author": "",
    "text": "\n This page covers more advanced techniques and features related to using tools in Mastra. \n Abort Signals \n When you initiate an agent interaction using generate() or stream(), you can provide an AbortSignal. Mastra automatically forwards this signal to any tool executions that occur during that interaction. \n This allows you to cancel long-running operations within your tools, such as network requests or intensive computations, if the parent agent call is aborted. \n You access the abortSignal in the second parameter of the tool’s execute function. \n import { createTool } from \" @mastra/core/tools \"; \n import { z } from \" zod \"; \n \n export const longRunningTool = createTool ({ \n id: \" long-computation \", \n description: \" Performs a potentially long computation \", \n inputSchema: z. object ({ /* ... */ }), \n execute: async ({ context }, { abortSignal }) =&gt; { \n // Example: Forwarding signal to fetch \n const response = await fetch ( \" https://api.example.com/data \", { \n signal: abortSignal, // Pass the signal here \n }); \n \n if (abortSignal?.aborted) { \n console. log ( \" Tool execution aborted. \"); \n throw new Error ( \" Aborted \"); \n } \n \n // Example: Checking signal during a loop \n for ( let i = 0; i &lt; 1000000; i ++) { \n if (abortSignal?.aborted) { \n console. log ( \" Tool execution aborted during loop. \"); \n throw new Error ( \" Aborted \"); \n } \n // ... perform computation step ... \n } \n \n const data = await response. json (); \n return { result: data }; \n }, \\ n}); \n To use this, provide an AbortController ’s signal when calling the agent: \n import { Agent } from \" @mastra/core/agent \"; \n // Assume 'agent' is an Agent instance with longRunningTool configured \n \n const controller = new AbortController (); \n \n // Start the agent call \n const promise = agent. generate ( \" Perform the long computation. \", { \n abortSignal: controller.signal, \n}); \n \n // Sometime later, if needed: \n // controller.abort(); \n \n try { \n const result = await promise; \n console. log (result.text); \n} catch (error) { \n if (error.name === ' AbortError ') { \n console. log ( \" Agent generation was aborted. \"); \n } else { \n console. error ( \" An error occurred: \", error); \n } \n} \n AI SDK Tool Format \n Mastra maintains compatibility with the tool format used by the Vercel AI SDK ( ai package). You can define tools using the tool function from the ai package and use them directly within your Mastra agents alongside tools created with Mastra’s createTool. \n First, ensure you have the ai package installed: \n Here’s an example of a tool defined using the Vercel AI SDK format: \n src/mastra/tools/vercelWeatherTool.ts import { tool } from \" ai \"; \n import { z } from \" zod \"; \n \n export const vercelWeatherTool = tool ({ \n description: \" Fetches current weather using Vercel AI SDK format \", \n parameters: z. object ({ \n city: z. string (). describe ( \" The city to get weather for \"), \n }), \n execute: async ({ city }) =&gt; { \n console. log ( ` Fetching weather for ${ city} (Vercel format tool) `); \n // Replace with actual API call \n const data = await fetch ( ` https://api.example.com/weather?city= ${ city}`); \n return data. json (); \n }, \n}); \n You can then add this tool to your Mastra agent just like any other tool: \n src/mastra/agents/mixedToolsAgent.ts import { Agent } from \" @mastra/core/agent \"; \n import { openai } from \" @ai-sdk/openai \"; \n import { vercelWeatherTool } from \"../tools/vercelWeatherTool \"; // Vercel AI SDK tool \n import { mastraTool } from \"../tools/mastraTool \"; // Mastra createTool tool \n \n export const mixedToolsAgent = new Agent ({ \n name: \" Mixed Tools Agent \", \n instructions: \n \" You can use tools defined in different formats. \", \n model: openai ( \" gpt-4o-mini \"), \n tools: { \n weatherVercel: vercelWeatherTool, \n someMastraTool: mastraTool, \n }, \n}); \n Mastra supports both tool formats, allowing you to mix and match as needed. Dynamic Tool Context Overview",
    "image": "https://mastra.ai/api/og/docs?title=Advanced%20Tool%20Usage%20|%20Tools%20&%20MCP%20|%20Mastra%20Docs&description=This%20page%20covers%20advanced%20features%20for%20Mastra%20tools,%20including%20abort%20signals%20and%20compatibility%20with%20the%20Vercel%20AI%20SDK%20tool%20format.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/tools-mcp/advanced-usage",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}