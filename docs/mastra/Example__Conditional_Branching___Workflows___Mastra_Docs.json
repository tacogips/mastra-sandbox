{
    "id": "https://mastra.ai/examples/workflows_vNext/conditional-branching",
    "title": "Example: Conditional Branching | Workflows | Mastra Docs",
    "url": "https://mastra.ai/examples/workflows_vNext/conditional-branching",
    "publishedDate": "1999-10-01T00:00:00.000Z",
    "author": "",
    "text": "Workflows often need to follow different paths based on some condition.\nThis example demonstrates how to use the branch construct to create conditional flows within your workflows. Define a planning agent which leverages an LLM call to plan activities given a location and corresponding weather conditions. import { Agent } from ' @mastra/core/agent ' \n import { openai } from ' @ai-sdk/openai ' \n \n const llm = openai ( ' gpt-4o ') \n \n const planningAgent = new Agent ({ \n name: ' planningAgent ', \n model: llm, \n instructions: ` \n You are a local activities and travel expert who excels at weather-based planning. Analyze the weather data and provide practical activity recommendations. \n \n üìÖ [Day, Month Date, Year] \n ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê \n \n üå°Ô∏è WEATHER SUMMARY \n ‚Ä¢ Conditions: [brief description] \n ‚Ä¢ Temperature: [X¬∞C/Y¬∞F to A¬∞C/B¬∞F] \n ‚Ä¢ Precipitation: [X% chance] \n \n üåÖ MORNING ACTIVITIES \n Outdoor: \n ‚Ä¢ [Activity Name] - [Brief description including specific location/route] \n Best timing: [specific time range] \n Note: [relevant weather consideration] \n \n üåû AFTERNOON ACTIVITIES \n Outdoor: \n ‚Ä¢ [Activity Name] - [Brief description including specific location/route] \n Best timing: [specific time range] \n Note: [relevant weather consideration] \n \n üè† INDOOR ALTERNATIVES \n ‚Ä¢ [Activity Name] - [Brief description including specific venue] \n Ideal for: [weather condition that would trigger this alternative] \n \n ‚ö†Ô∏è SPECIAL CONSIDERATIONS \n ‚Ä¢ [Any relevant weather warnings, UV index, wind conditions, etc.] \n \n Guidelines: \n - Suggest 2-3 time-specific outdoor activities per day \n - Include 1-2 indoor backup options \n - For precipitation &gt;50%, lead with indoor activities \n - All activities must be specific to the location \n - Include specific venues, trails, or locations \n - Consider activity intensity based on temperature \n - Keep descriptions concise but informative \n \n Maintain this exact formatting for consistency, using the emoji and section headers as shown. \n `, \n}) \n \n export { planningAgent } Define the weather workflow with 3 steps: one to fetch the weather via a network call, one to plan activities, and another to plan only indoor activities.\nBoth using the planning agent. workflows/conditional-workflow.ts import { z } from ' zod ' \n import { createStep, createWorkflow } from './vNext ' \n \n \n function getWeatherCondition (code: number): string { \n const conditions: Record &lt; number, string &gt; = { \n 0: ' Clear sky ', \n 1: ' Mainly clear ', \n 2: ' Partly cloudy ', \n 3: ' Overcast ', \n 45: ' Foggy ', \n 48: ' Depositing rime fog ', \n 51: ' Light drizzle ', \n 53: ' Moderate drizzle ', \n 55: ' Dense drizzle ', \n 61: ' Slight rain ', \n 63: ' Moderate rain ', \n 65: ' Heavy rain ', \n 71: ' Slight snow fall ', \n 73: ' Moderate snow fall ', \n 75: ' Heavy snow fall ', \n 95: ' Thunderstorm ', \n } \n return conditions[code] || ' Unknown ' \n} \n \n const forecastSchema = z. object ({ \n date: z. string (), \n maxTemp: z. number (), \n minTemp: z. number (), \n precipitationChance: z. number (), \n condition: z. string (), \n location: z. string (), \n}) \n \n // Fetch weather step \n const fetchWeather = createStep ({ \n id: ' fetch-weather ', \n description: ' Fetches weather forecast for a given city ', \n inputSchema: z. object ({ \n city: z. string (), \n }), \n outputSchema: forecastSchema, \n execute: async ({ inputData }) =&gt; { \n if (! inputData) { \n throw new Error ( ' Trigger data not found ') \n } \n \n const geocodingUrl = ` https://geocoding-api.open-meteo.com/v1/search?name= ${ encodeURIComponent (inputData.city)} &amp;count=1 ` \n const geocodingResponse = await fetch (geocodingUrl) \n const geocodingData = ( await geocodingResponse. json ()) as { \n results: { latitude: number; longitude: number; name: string }[] \n } \n \n if (! geocodingData.results?.[ 0]) { \n throw new Error ( ` Location ' ${ inputData.city} ' not found `) \n } \n \n const { latitude, longitude, name } = geocodingData.results[ 0] \n \n const weatherUrl = ` https://api.open-meteo.com/v1/forecast?latitude= ${ latitude} &amp;longitude= ${ longitude} &amp;current=precipitation,weathercode&amp;timezone=auto,&amp;hourly=precipitation_probability,temperature_2m ` \n const response = await fetch (weatherUrl) \n const data = ( await response. json ()) as { \n current: { \n time: string \n precipitation: number \n weathercode: number \n } \n hourly: { \n precipitation_probability: number [] \n temperature_2m: number [] \n } \n } \n \n const forecast = { \n date: new Date (). toISOString (), \n maxTemp: Math. max (... data.hourly.temperature_2m), \n minTemp: Math. min (... data.hourly.temperature_2m), \n condition: getWeatherCondition (data.current.weathercode), \n location: name, \n precipitationChance: data.hourly.precipitation_probability. reduce ( \n (acc, curr) =&gt; Math. max (acc, curr), \n 0 \n ), \n } \n \n return forecast \n }, \n}) \n \n // Plan activities indorrs or outdoors \n const planActivities = createStep ({ \n id: ' plan-activities ', \n description: ' Suggests activities based on weather conditions ', \n inputSchema: forecastSchema, \n outputSchema: z. object ({ \n activities: z. string (), \n }), \n execute: async ({ inputData, mastra }) =&gt; { \n console. log ( ' planActivities ') \n const forecast = inputData \n \n if (! forecast) { \n throw new Error ( ' Forecast data not found ') \n } \n \n const prompt = ` Based on the following weather forecast for ${ forecast.location}, suggest appropriate activities: \n ${ JSON. stringify (forecast, null, 2)} \n ` \n \n const agent = mastra?. getAgent ( ' planningAgent ') \n if (! agent) { \n throw new Error ( ' Planning agent not found ') \n } \n \n const response = await agent. stream ([ \n { \n role: ' user ', \n content: prompt, \n }, \n ]) \n \n let activitiesText = '' \n \n for await ( const chunk of response.textStream) { \n process.stdout. write (chunk) \n activitiesText += chunk \n } \n \n return { \n activities: activitiesText, \n } \n }, \n}) \n \n // Plan indoor activities only \n const planIndoorActivities = createStep ({ \n id: ' plan-indoor-activities ', \n description: ' Suggests indoor activities based on weather conditions ', \n inputSchema: forecastSchema, \n outputSchema: z. object ({ \n activities: z. string (), \n }), \n execute: async ({ inputData, mastra }) =&gt; { \n console. log ( ' planIndoorActivities ') \n const forecast = inputData \n \n if (! forecast) { \n throw new Error ( ' Forecast data not found ') \n } \n \n const prompt = ` In case it rains, plan indoor activities for ${ forecast.location} on ${ forecast.date}` \n \n const agent = mastra?. getAgent ( ' planningAgent ') \n if (! agent) { \n throw new Error ( ' Planning agent not found ') \n } \n \n const response = await agent. stream ([ \n { \n role: ' user ', \n content: prompt, \n }, \n ]) \n \n let activitiesText = '' \n \n for await ( const chunk of response.textStream) { \n process.stdout. write (chunk) \n activitiesText += chunk \n } \n \n return { \n activities: activitiesText, \n } \n }, \n}) \n \n const weatherWorkflow = createWorkflow ({ \n id: ' weather-workflow-step2-if-else ', \n inputSchema: z. object ({ \n city: z. string (). describe ( ' The city to get the weather for '), \n }), \n outputSchema: z. object ({ \n activities: z. string (), \n }), \n}) \n . then (fetchWeather) \n . branch ([ \n [ \n async ({ inputData }) =&gt; { \n return inputData?.precipitationChance &gt; 50 \n }, \n planIndoorActivities, \n ], \n [ \n async ({ inputData }) =&gt; { \n return inputData?.precipitationChance &lt;= 50 \n }, \n planActivities, \n ], \n ]) \n \n weatherWorkflow. commit () \n \n export { weatherWorkflow } import { Mastra } from ' @mastra/core/mastra ' \n import { createLogger } from ' @mastra/core/logger ' \n import { weatherWorkflow } from './workflows ' \n import { planningAgent } from './agents ' \n \n const mastra = new Mastra ({ \n vnext_workflows: { \n weatherWorkflow, \n }, \n agents: { \n planningAgent, \n }, \n logger: createLogger ({ \n name: ' Mastra ', \n level: ' info ', \n }), \n}) \n \n export { mastra } Register the agents and workflow with the mastra instance.\nThis is critical for enabling access to the agents within the workflow. import { Mastra } from ' @mastra/core/mastra ' \n import { createLogger } from ' @mastra/core/logger ' \n import { weatherWorkflow } from './workflows ' \n import { planningAgent } from './agents ' \n \n const mastra = new Mastra ({ \n vnext_workflows: { \n weatherWorkflow, \n }, \n agents: { \n planningAgent, \n }, \n logger: createLogger ({ \n name: ' Mastra ', \n level: ' info ', \n }), \n}) \n \n export { mastra } Here, we‚Äôll get the weather workflow from the mastra instance, then create a run and execute the created run with the required inputData. import { mastra } from \"./ \" \n \n const workflow = mastra. vnext_getWorkflow ( ' weatherWorkflow ') \n const run = workflow. createRun () \n \n const result = await run. start ({ inputData: { city: ' New York ' } }) \n console. dir (result, { depth: null })",
    "image": "https://mastra.ai/api/og/docs?title=Example:%20Conditional%20Branching%20|%20Workflows%20|%20Mastra%20Docs&description=Example%20of%20using%20Mastra%20to%20create%20conditional%20branches%20in%20workflows%20using%20the%20`branch`%20statement%20.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/examples/workflows_vNext/conditional-branching",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}