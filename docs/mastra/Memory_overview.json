{
    "id": "https://mastra.ai/docs/memory/overview",
    "title": "Memory overview",
    "url": "https://mastra.ai/docs/memory/overview",
    "author": "",
    "text": "\n Memory is how agents manage the context that’s available to them, it’s a condensation of all chat messages into their context window. \n The Context Window \n The context window is the total information visible to the language model at any given time. \n In Mastra, context is broken up into three parts: system instructions and information about the user ( working memory), recent messages ( message history), and older messages that are relevant to the user’s query ( semantic recall). \n In addition, we provide memory processors to trim context or remove information if the context is too long. \n Quick Start \n The fastest way to see memory in action is using the built-in development playground. \n If you haven’t already, create a new Mastra project following the main Getting Started guide. \n 1. Install the memory package: \n npm install @mastra/memory@latest \n 2. Create an agent and attach a Memory instance: \n src/mastra/agents/index.ts import { Agent } from \" @mastra/core/agent \"; \n import { Memory } from \" @mastra/memory \"; \n import { openai } from \" @ai-sdk/openai \"; \n \n export const myMemoryAgent = new Agent ({ \n name: \" MemoryAgent \", \n instructions: \"... \", \n model: openai ( \" gpt-4o \"), \n \n memory: new Memory (), \n}); \n 3. Start the Development Server: \n 4. Open the playground ( http://localhost:4111 ) and select your MemoryAgent: \n Send a few messages and notice that it remembers information across turns: \n ➡️ You: My favorite color is blue. \n ⬅️ Agent: Got it! I'll remember that your favorite color is blue. \n ➡️ You: What is my favorite color? \n ⬅️ Agent: Your favorite color is blue. \n Memory Threads \n Mastra organizes memory into threads, which are records that identify specific conversation histories, using two identifiers: \n \n threadId: A specific conversation id (e.g., support_123). \n resourceId: The user or entity id that owns each thread (e.g., user_123, org_456). \n \n const response = await myMemoryAgent. stream ( \" Hello, my name is Alice. \", { \n resourceId: \" user_alice \", \n threadId: \" conversation_123 \", \n}); \n Important: without these ID’s your agent will not use memory, even if memory is properly configured. The playground handles this for you, but you need to add ID’s yourself when using memory in your application. \n Conversation History \n By default, the Memory instance includes the last 40 messages from the current Memory thread in each new request. This provides the agent with immediate conversational context. \n const memory = new Memory ({ \n options: { \n lastMessages: 10, \n }, \n}); \n Important: Only send the newest user message in each agent call. Mastra handles retrieving and injecting the necessary history. Sending the full history yourself will cause duplication. See the AI SDK Memory Example for how to handle this with when using the useChat frontend hooks. \n Storage Configuration \n Conversation history relies on a storage adapter to store messages.\nBy default it uses the same storage provided to the main Mastra instance  \n import { Memory } from \" @mastra/memory \"; \n import { Agent } from \" @mastra/core/agent \"; \n import { LibSQLStore } from \" @mastra/libsql \"; \n \n const agent = new Agent ({ \n memory: new Memory ({ \n storage: new LibSQLStore ({ \n url: \" file:./local.db \", \n }), \n }), \n}); \n Storage code Examples: \n \n LibSQL \n Postgres \n Upstash \n \n Next Steps \n Now that you understand the core concepts, continue to semantic recall to learn how to add RAG memory to your Mastra agents. \n Alternatively you can visit the configuration reference for available options, or browse usage examples.",
    "image": "https://mastra.ai/api/og/docs?title=Memory%20overview&description=undefined",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/memory/overview",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}