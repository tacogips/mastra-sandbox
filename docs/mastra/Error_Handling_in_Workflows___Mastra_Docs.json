{
    "id": "https://mastra.ai/docs/workflows/error-handling",
    "title": "Error Handling in Workflows | Mastra Docs",
    "url": "https://mastra.ai/docs/workflows/error-handling",
    "publishedDate": "2000-01-01T00:00:00.000Z",
    "author": "",
    "text": "\n Robust error handling is essential for production workflows. Mastra provides several mechanisms to handle errors gracefully, allowing your workflows to recover from failures or gracefully degrade when necessary. \n Overview \n Error handling in Mastra workflows can be implemented using: \n \n Step Retries - Automatically retry failed steps \n Conditional Branching - Create alternative paths based on step success or failure \n Error Monitoring - Watch workflows for errors and handle them programmatically \n Result Status Checks - Check the status of previous steps in subsequent steps \n \n Step Retries \n Mastra provides a built-in retry mechanism for steps that fail due to transient errors. This is particularly useful for steps that interact with external services or resources that might experience temporary unavailability. \n Basic Retry Configuration \n You can configure retries at the workflow level or for individual steps: \n // Workflow-level retry configuration \n const workflow = new Workflow ({ \n name: ' my-workflow ', \n retryConfig: { \n attempts: 3, // Number of retry attempts \n delay: 1000, // Delay between retries in milliseconds \n }, \n}); \n \n // Step-level retry configuration (overrides workflow-level) \n const apiStep = new Step ({ \n id: ' callApi ', \n execute: async () =&gt; { \n // API call that might fail \n }, \n retryConfig: { \n attempts: 5, // This step will retry up to 5 times \n delay: 2000, // With a 2-second delay between retries \n }, \n}); \n For more details about step retries, see the Step Retries reference. \n Conditional Branching \n You can create alternative workflow paths based on the success or failure of previous steps using conditional logic: \n // Create a workflow with conditional branching \n const workflow = new Workflow ({ \n name: ' error-handling-workflow ', \n}); \n \n workflow \n . step (fetchDataStep) \n . then (processDataStep, { \n // Only execute processDataStep if fetchDataStep was successful \n when: ({ context }) =&gt; { \n return context.steps.fetchDataStep?.status === ' success '; \n }, \n }) \n . then (fallbackStep, { \n // Execute fallbackStep if fetchDataStep failed \n when: ({ context }) =&gt; { \n return context.steps.fetchDataStep?.status === ' failed '; \n }, \n }) \n . commit (); \n Error Monitoring \n You can monitor workflows for errors using the watch method: \n const { start, watch } = workflow. createRun (); \n \n watch ( async ({ results }) =&gt; { \n // Check for any failed steps \n const failedSteps = Object. entries (results) \n . filter (([_, step]) =&gt; step.status === \" failed \") \n . map (([stepId]) =&gt; stepId); \n \n if (failedSteps. length &gt; 0) { \n console. error ( ` Workflow has failed steps: ${ failedSteps. join ( ', ')}`); \n // Take remedial action, such as alerting or logging \n } \n}); \n \n await start (); \n Handling Errors in Steps \n Within a stepâ€™s execution function, you can handle errors programmatically: \n const robustStep = new Step ({ \n id: ' robustStep ', \n execute: async ({ context }) =&gt; { \n try { \n // Attempt the primary operation \n const result = await someRiskyOperation (); \n return { success: true, data: result }; \n } catch (error) { \n // Log the error \n console. error ( ' Operation failed: ', error); \n \n // Return a graceful fallback result instead of throwing \n return { \n success: false, \n error: error.message, \n fallbackData: ' Default value ' \n }; \n } \n }, \n}); \n Checking Previous Step Results \n You can make decisions based on the results of previous steps: \n const finalStep = new Step ({ \n id: ' finalStep ', \n execute: async ({ context }) =&gt; { \n // Check results of previous steps \n const step1Success = context.steps.step1?.status === ' success '; \n const step2Success = context.steps.step2?.status === ' success '; \n \n if (step1Success &amp;&amp; step2Success) { \n // All steps succeeded \n return { status: ' complete ', result: ' All operations succeeded ' }; \n } else if (step1Success) { \n // Only step1 succeeded \n return { status: ' partial ', result: ' Partial completion ' }; \n } else { \n // Critical failure \n return { status: ' failed ', result: ' Critical steps failed ' }; \n } \n }, \n}); \n Best Practices for Error Handling \n \n \n Use retries for transient failures: Configure retry policies for steps that might experience temporary issues. \n \n \n Provide fallback paths: Design workflows with alternative paths for when critical steps fail. \n \n \n Be specific about error scenarios: Use different handling strategies for different types of errors. \n \n \n Log errors comprehensively: Include context information when logging errors to aid in debugging. \n \n \n Return meaningful data on failure: When a step fails, return structured data about the failure to help downstream steps make decisions. \n \n \n Consider idempotency: Ensure steps can be safely retried without causing duplicate side effects. \n \n \n Monitor workflow execution: Use the watch method to actively monitor workflow execution and detect errors early. \n \n \n Advanced Error Handling \n For more complex error handling scenarios, consider: \n \n Implementing circuit breakers: If a step fails repeatedly, stop retrying and use a fallback strategy \n Adding timeout handling: Set time limits for steps to prevent workflows from hanging indefinitely \n Creating dedicated error recovery workflows: For critical workflows, create separate recovery workflows that can be triggered when the main workflow fails \n \n Related \n \n Step Retries Reference \n Watch Method Reference \n Step Conditions \n Control Flow \n",
    "image": "https://mastra.ai/api/og/docs?title=Error%20Handling%20in%20Workflows%20|%20Mastra%20Docs&description=Learn%20how%20to%20handle%20errors%20in%20Mastra%20workflows%20using%20step%20retries,%20conditional%20branching,%20and%20monitoring.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/workflows/error-handling",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}