{
    "id": "https://mastra.ai/docs/observability/tracing",
    "title": "Tracing | Mastra Observability Documentation",
    "url": "https://mastra.ai/docs/observability/tracing",
    "publishedDate": "1999-10-01T00:00:00.000Z",
    "author": "",
    "text": "\n Mastra supports the OpenTelemetry Protocol (OTLP) for tracing and monitoring your application. When telemetry is enabled, Mastra automatically traces all core primitives including agent operations, LLM interactions, tool executions, integration calls, workflow runs, and database operations. Your telemetry data can then be exported to any OTEL collector. \n Basic Configuration \n Here’s a simple example of enabling telemetry: \n export const mastra = new Mastra ({ \n // ... other config \n telemetry: { \n serviceName: \" my-app \", \n enabled: true, \n sampling: { \n type: \" always_on \", \n }, \n export: { \n type: \" otlp \", \n endpoint: \" http://localhost:4318 \", // SigNoz local endpoint \n }, \n }, \n}); \n Configuration Options \n The telemetry config accepts these properties: \n type OtelConfig = { \n // Name to identify your service in traces (optional) \n serviceName?: string; \n \n // Enable/disable telemetry (defaults to true) \n enabled?: boolean; \n \n // Control how many traces are sampled \n sampling?: { \n type: \" ratio \" | \" always_on \" | \" always_off \" | \" parent_based \"; \n probability?: number; // For ratio sampling \n root?: { \n probability: number; // For parent_based sampling \n }; \n }; \n \n // Where to send telemetry data \n export?: { \n type: \" otlp \" | \" console \"; \n endpoint?: string; \n headers?: Record &lt; string, string &gt;; \n }; \n}; \n See the OtelConfig reference documentation for more details. \n Environment Variables \n You can configure the OTLP endpoint and headers through environment variables: \n.env OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318 \n OTEL_EXPORTER_OTLP_HEADERS=x-api-key=your-api-key \n Then in your config: \n export const mastra = new Mastra ({ \n // ... other config \n telemetry: { \n serviceName: \" my-app \", \n enabled: true, \n export: { \n type: \" otlp \", \n // endpoint and headers will be picked up from env vars \n }, \n }, \n}); \n Example: SigNoz Integration \n Here’s what a traced agent interaction looks like in SigNoz : \n Other Supported Providers \n For a complete list of supported observability providers and their configuration details, see the Observability Providers reference. \n Next.js-specific Tracing steps \n If you’re using Next.js, you have three additional configuration steps: \n \n Enable the instrumentation hook in next.config.ts \n Configure Mastra telemetry settings \n Set up an OpenTelemetry exporter \n \n For implementation details, see the Next.js Tracing guide. Logging Overview",
    "image": "https://mastra.ai/api/og/docs?title=Tracing%20|%20Mastra%20Observability%20Documentation&description=Set%20up%20OpenTelemetry%20tracing%20for%20Mastra%20applications",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/observability/tracing",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}