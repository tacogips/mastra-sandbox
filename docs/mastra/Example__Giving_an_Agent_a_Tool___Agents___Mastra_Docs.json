{
    "id": "https://mastra.ai/examples/agents/using-a-tool",
    "title": "Example: Giving an Agent a Tool | Agents | Mastra Docs",
    "url": "https://mastra.ai/examples/agents/using-a-tool",
    "publishedDate": "",
    "author": "",
    "text": "\n When building AI agents, you often need to integrate external data sources or functionality to enhance their capabilities. This example shows how to create an AI agent that uses a dedicated weather tool to provide accurate weather information for specific locations. \n import { Mastra } from \" @mastra/core \"; \n import { Agent } from \" @mastra/core/agent \"; \n import { createTool } from \" @mastra/core/tools \"; \n import { openai } from \" @ai-sdk/openai \"; \n import { z } from \" zod \"; \n \n interface WeatherResponse { \n current: { \n time: string; \n temperature_2m: number; \n apparent_temperature: number; \n relative_humidity_2m: number; \n wind_speed_10m: number; \n wind_gusts_10m: number; \n weather_code: number; \n }; \n} \n \n const weatherTool = createTool ({ \n id: \" get-weather \", \n description: \" Get current weather for a location \", \n inputSchema: z. object ({ \n location: z. string (). describe ( \" City name \"), \n }), \n outputSchema: z. object ({ \n temperature: z. number (), \n feelsLike: z. number (), \n humidity: z. number (), \n windSpeed: z. number (), \n windGust: z. number (), \n conditions: z. string (), \n location: z. string (), \n }), \n execute: async ({ context }) =&gt; { \n return await getWeather (context.location); \n }, \n}); \n \n const getWeather = async (location: string) =&gt; { \n const geocodingUrl = ` https://geocoding-api.open-meteo.com/v1/search?name= ${ encodeURIComponent (location)} &amp;count=1 `; \n const geocodingResponse = await fetch (geocodingUrl); \n const geocodingData = await geocodingResponse. json (); \n \n if (! geocodingData.results?.[ 0]) { \n throw new Error ( ` Location ' ${ location} ' not found `); \n } \n \n const { latitude, longitude, name } = geocodingData.results[ 0]; \n \n const weatherUrl = ` https://api.open-meteo.com/v1/forecast?latitude= ${ latitude} &amp;longitude= ${ longitude} &amp;current=temperature_2m,apparent_temperature,relative_humidity_2m,wind_speed_10m,wind_gusts_10m,weather_code `; \n \n const response = await fetch (weatherUrl); \n const data: WeatherResponse = await response. json (); \n \n return { \n temperature: data.current.temperature_2m, \n feelsLike: data.current.apparent_temperature, \n humidity: data.current.relative_humidity_2m, \n windSpeed: data.current.wind_speed_10m, \n windGust: data.current.wind_gusts_10m, \n conditions: getWeatherCondition (data.current.weather_code), \n location: name, \n }; \n}; \n \n function getWeatherCondition (code: number): string { \n const conditions: Record &lt; number, string &gt; = { \n 0: \" Clear sky \", \n 1: \" Mainly clear \", \n 2: \" Partly cloudy \", \n 3: \" Overcast \", \n 45: \" Foggy \", \n 48: \" Depositing rime fog \", \n 51: \" Light drizzle \", \n 53: \" Moderate drizzle \", \n 55: \" Dense drizzle \", \n 56: \" Light freezing drizzle \", \n 57: \" Dense freezing drizzle \", \n 61: \" Slight rain \", \n 63: \" Moderate rain \", \n 65: \" Heavy rain \", \n 66: \" Light freezing rain \", \n 67: \" Heavy freezing rain \", \n 71: \" Slight snow fall \", \n 73: \" Moderate snow fall \", \n 75: \" Heavy snow fall \", \n 77: \" Snow grains \", \n 80: \" Slight rain showers \", \n 81: \" Moderate rain showers \", \n 82: \" Violent rain showers \", \n 85: \" Slight snow showers \", \n 86: \" Heavy snow showers \", \n 95: \" Thunderstorm \", \n 96: \" Thunderstorm with slight hail \", \n 99: \" Thunderstorm with heavy hail \", \n }; \n return conditions[code] || \" Unknown \"; \n} \n \n const weatherAgent = new Agent ({ \n name: \" Weather Agent \", \n instructions: ` You are a helpful weather assistant that provides accurate weather information. \n Your primary function is to help users get weather details for specific locations. When responding: \n - Always ask for a location if none is provided \n - If the location name isnâ€™t in English, please translate it \n - Include relevant details like humidity, wind conditions, and precipitation \n - Keep responses concise but informative \n Use the weatherTool to fetch current weather data. `, \n model: openai ( \" gpt-4o-mini \"), \n tools: { weatherTool }, \n}); \n \n const mastra = new Mastra ({ \n agents: { weatherAgent }, \n}); \n \n async function main () { \n const agent = await mastra. getAgent ( \" weatherAgent \"); \n const result = await agent. generate ( \" What is the weather in London? \"); \n console. log (result.text); \n} \n \n main (); \n \n Agentic Workflows Hierarchical Multi-Agent System",
    "image": "https://mastra.ai/api/og/docs?title=Example:%20Giving%20an%20Agent%20a%20Tool%20|%20Agents%20|%20Mastra%20Docs&description=Example%20of%20creating%20an%20AI%20agent%20in%20Mastra%20that%20uses%20a%20dedicated%20tool%20to%20provide%20weather%20information.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/examples/agents/using-a-tool",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}