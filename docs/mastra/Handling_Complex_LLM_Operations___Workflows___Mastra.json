{
    "id": "https://mastra.ai/docs/workflows/overview",
    "title": "Handling Complex LLM Operations | Workflows | Mastra",
    "url": "https://mastra.ai/docs/workflows/overview",
    "publishedDate": "1999-10-01T00:00:00.000Z",
    "author": "",
    "text": "\n Workflows in Mastra help you orchestrate complex sequences of operations with features like branching, parallel execution, resource suspension, and more. \n When to use workflows \n Most AI applications need more than a single call to a language model. You may want to run multiple steps, conditionally skip certain paths, or even pause execution altogether until you receive user input. Sometimes your agent tool calling is not accurate enough. \n Mastra’s workflow system provides: \n \n A standardized way to define steps and link them together. \n Support for both simple (linear) and advanced (branching, parallel) paths. \n Debugging and observability features to track each workflow run. \n \n Example \n To create a workflow, you define one or more steps, link them, and then commit the workflow before starting it. \n Breaking Down the Workflow \n Let’s examine each part of the workflow creation process: \n 1. Creating the Workflow \n Here’s how you define a workflow in Mastra. The name field determines the workflow’s API endpoint ( /workflows/$NAME/), while the triggerSchema defines the structure of the workflow’s trigger data: \n src/mastra/workflow/index.ts const myWorkflow = new Workflow ({ \n name: \" my-workflow \", \n triggerSchema: z. object ({ \n inputValue: z. number (), \n }), \n}); \n 2. Defining Steps \n Now, we’ll define the workflow’s steps. Each step can have its own input and output schemas. Here, stepOne doubles an input value, and stepTwo increments that result if stepOne was successful. (To keep things simple, we aren’t making any LLM calls in this example): \n src/mastra/workflow/index.ts const stepOne = new Step ({ \n id: \" stepOne \", \n outputSchema: z. object ({ \n doubledValue: z. number (), \n }), \n execute: async ({ context }) =&gt; { \n const doubledValue = context.triggerData.inputValue * 2; \n return { doubledValue }; \n }, \n}); \n \n const stepTwo = new Step ({ \n id: \" stepTwo \", \n execute: async ({ context }) =&gt; { \n const doubledValue = context. getStepResult (stepOne)?.doubledValue; \n if (! doubledValue) { \n return { incrementedValue: 0 }; \n } \n return { \n incrementedValue: doubledValue + 1, \n }; \n }, \n}); \n 3. Linking Steps \n Now, let’s create the control flow, and “commit” (finalize the workflow). In this case, stepOne runs first and is followed by stepTwo. \n src/mastra/workflow/index.ts myWorkflow. step (stepOne). then (stepTwo). commit (); \n Register the Workflow \n Register your workflow with Mastra to enable logging and telemetry: \n import { Mastra } from \" @mastra/core \"; \n \n export const mastra = new Mastra ({ \n workflows: { myWorkflow }, \n}); \n The workflow can also have the mastra instance injected into the context in the case where you need to create dynamic workflows: \n src/mastra/workflow/index.ts import { Mastra } from \" @mastra/core \"; \n \n const mastra = new Mastra (); \n \n const myWorkflow = new Workflow ({ \n name: \" my-workflow \", \n mastra, \n}); \n Executing the Workflow \n Execute your workflow programmatically or via API: \n src/mastra/run-workflow.ts import { mastra } from \"./index \"; \n \n // Get the workflow \n const myWorkflow = mastra. getWorkflow ( \" myWorkflow \"); \n const { runId, start } = myWorkflow. createRun (); \n \n // Start the workflow execution \n await start ({ triggerData: { inputValue: 45 } }); \n Or use the API (requires running mastra dev): \n // Create workflow run \n curl --location ' http://localhost:4111/api/workflows/myWorkflow/start-async ' \\ \n --header ' Content-Type: application/json ' \\ \n --data ' { \n \"inputValue\": 45 \n } ' \n This example shows the essentials: define your workflow, add steps, commit the workflow, then execute it. \n Defining Steps \n The basic building block of a workflow is a step. Steps are defined using schemas for inputs and outputs, and can fetch prior step results. \n Control Flow \n Workflows let you define a control flow to chain steps together in with parallel steps, branching paths, and more. \n Workflow Variables \n When you need to map data between steps or create dynamic data flows, workflow variables provide a powerful mechanism for passing information from one step to another and accessing nested properties within step outputs. \n Suspend and Resume \n When you need to pause execution for external data, user input, or asynchronous events, Mastra supports suspension at any step, persisting the state of the workflow so you can resume it later. \n Observability and Debugging \n Mastra workflows automatically log the input and output of each step within a workflow run, allowing you to send this data to your preferred logging, telemetry, or observability tools. \n You can: \n \n Track the status of each step (e.g., success, error, or suspended). \n Store run-specific metadata for analysis. \n Integrate with third-party observability platforms like Datadog or New Relic by forwarding logs. \n \n \n ## More Resources \n \n - The [Workflow Guide](../guides/ai-recruiter.mdx) in the Guides section is a tutorial that covers the main concepts. \n - [Sequential Steps workflow example](../../examples/workflows/sequential-steps.mdx) \n - [Parallel Steps workflow example](../../examples/workflows/parallel-steps.mdx) \n - [Branching Paths workflow example](../../examples/workflows/branching-paths.mdx) \n - [Workflow Variables example](../../examples/workflows/workflow-variables.mdx) \n - [Cyclical Dependencies workflow example](../../examples/workflows/cyclical-dependencies.mdx) \n - [Suspend and Resume workflow example](../../examples/workflows/suspend-and-resume.mdx)",
    "image": "https://mastra.ai/api/og/docs?title=Handling%20Complex%20LLM%20Operations%20|%20Workflows%20|%20Mastra&description=Workflows%20in%20Mastra%20help%20you%20orchestrate%20complex%20sequences%20of%20operations%20with%20features%20like%20branching,%20parallel%20execution,%20resource%20suspension,%20and%20more.",
    "favicon": "https://mastra.ai/favicon.ico",
    "extras": {
        "links": [
            "https://mastra.ai/en/docs/workflows/overview",
            "https://mastra.ai/",
            "https://mastra.ai/docs",
            "https://mastra.ai/examples"
        ]
    }
}